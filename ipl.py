# -*- coding: utf-8 -*-
"""IPL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uWR2x1ZdaDyPIoNS3Eegyc-1nvcM2oaM
"""

import numpy as np
import pandas as pd

match = pd.read_csv('/content/drive/MyDrive/IPL/IPL_Matches_2008_2022.csv')
delivery = pd.read_csv('/content/drive/MyDrive/IPL/IPL_Ball_by_Ball_2008_2022.csv')

match['Season'].unique()

dff = match

seasons_to_remove = ['2007/08','2008', '2009', '2010','2012', '2013', '2014', '2016', '2020/21','2022']
match = match.loc[~match['Season'].isin(seasons_to_remove)]

match['Season'].unique()

match.tail(3)

match = match.rename(columns={'Team1': 'Batting-Team', 'Team2': 'Bowling-Team'})

m = match[['ID','City',  'Batting-Team' ,  'Bowling-Team']]

m.isna().sum()

delivery.tail(2)

d = delivery
d = d[d['innings'] == 1]

d = d.rename(columns={'isWicketDelivery': 'Wicket' })
d

d = d[['ID', 'overs', 'ballnumber' , 'total_run' , 'Wicket' ,'player_out']]

merged_df = pd.merge(m, d, on='ID')
merged_df

merged_df['City'].unique()

merged_df.replace('Bengaluru', ' Bangalore', inplace=True)
merged_df.replace('Rajkot', 'Ahmedabad', inplace=True)
merged_df.replace('Kanpur', 'Lucknow', inplace=True)
merged_df.replace('Pune', 'Lucknow', inplace=True)
merged_df.replace('Chandigarh', 'Mohali', inplace=True)
merged_df.replace('Dharamsala', 'Mohali', inplace=True)

cities = ['Ahmedabad', 'Kolkata', 'Mumbai', 'Lucknow', 'Delhi', 'Chennai', 'Hyderabad',
        'Mohali', 'Jaipur', 'Bangalore']

merged_df = merged_df[merged_df['City'].isin(cities)]

merged_df['City'].unique()

merged_df['overs'] = merged_df['overs'].astype(float)

merged_df.head(2)

# result_col = []
# for i in range(len(merged_df)):
#   result_col.append(merged_df['overs'][i] + merged_df['ballnumber'][i]/10)

# merged_df['over'] = result_col

merged_df['over'] = merged_df.apply(lambda row: row['overs'] + row['ballnumber']/10, axis=1)

merged_df

merged_df = merged_df.drop('ballnumber', axis=1)
merged_df.head(2)

merged_df['current_score'] = merged_df.groupby('ID').cumsum()['total_run']
merged_df.head(3)

merged_df['overs'] = merged_df['over'].apply(lambda x:str(x).split(".")[0])
merged_df['ball_no'] = merged_df['over'].apply(lambda x:str(x).split(".")[1])
merged_df.head(3)

merged_df['balls_bowled'] = (merged_df['overs'].astype('int') * 6) + merged_df['ball_no'].astype('int')
merged_df.head(3)

merged_df['balls_left'] = 120 - merged_df['balls_bowled']
merged_df['balls_left'] = merged_df['balls_left'].apply(lambda x:0 if x<0 else x)
merged_df.head(3)

df = merged_df
df['player_out'] = df['player_out'].apply(lambda x: 0 if pd.isna(x) or x == '0' else 1)
df['player_out'] = df['player_out'].astype('int')
df['player_out'] = df.groupby('ID').cumsum()['player_out']
df['wickets_left'] = 10 - df['player_out']

df['crr'] = (df['current_score']*6)/df['balls_bowled']

groups = df.groupby('ID')

IDs = df['ID'].unique()
last_five = []
for id in IDs:
    last_five.extend(groups.get_group(id).rolling(window=30).sum()['total_run'].values.tolist())

df['last_five'] = last_five

df.tail(3)

df = df.groupby('ID').sum()['total_run'].reset_index().merge(df,on='ID')

fdf = df

fdf= fdf[['Batting-Team','Bowling-Team','City','current_score','balls_left','wickets_left','crr','last_five','total_run_x']]

fdf.replace('Gujarat Lions', 'Gujarat Titans', inplace=True)
fdf.replace('Delhi Daredevils', 'Delhi Capitals', inplace=True)
fdf.replace('Pune Warriors ', 'Lucknow Super Giants', inplace=True)
fdf.replace('Deccan Chargers', 'Sunrisers Hyderabad', inplace=True)
fdf.replace('Rising Pune Supergiant', 'Lucknow Super Giants', inplace=True)
fdf.replace('Kings XI Punjab', 'Punjab Kings', inplace=True)

teams = [
    'Chennai Super Kings',
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers Bangalore',
    'Kolkata Knight Riders',
    'Punjab Kings',
    'Rajasthan Royals',
    'Delhi Capitals',
    'Gujarat Titans',
    'Lucknow Super Giants'
]

fdf = fdf[fdf['Batting-Team'].isin(teams)]
fdf = fdf[fdf['Bowling-Team'].isin(teams)]

fdf['Batting-Team'].unique()

fdf.replace('Kanpur', 'Lucknow', inplace=True)
fdf.replace('Pune', 'Dharamshala', inplace=True)

fdf = fdf.rename(columns={'Batting-Team': 'batting_team', 'Bowling-Team': 'bowling_team', 'City':'city'})

fdf.shape

fdf.dropna(inplace=True)

fdf = fdf.sample(fdf.shape[0])

X = fdf.drop(columns=['total_run_x'])
y = fdf['total_run_x']
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

X_train

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import r2_score,mean_absolute_error

trf = ColumnTransformer([
    ('trf',OneHotEncoder(sparse=False,drop='first'),['batting_team','bowling_team','city'])
]
,remainder='passthrough')

pipe = Pipeline(steps=[
    ('preprocessor', trf),
    ('scaler', StandardScaler()),
    ('model', XGBRegressor(n_estimators=2000, learning_rate=0.1, max_depth=8,
                           subsample=0.8, colsample_bytree=0.8,
                           reg_alpha=0.01, reg_lambda=0.01,
                           random_state=1, n_jobs=-1))
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)
print(r2_score(y_test,y_pred))
print(mean_absolute_error(y_test,y_pred))

import pickle
pickle.dump(pipe, open('pp1.pkl','wb'))

from google.colab import files
files.download('pp1.pkl')

fdf['batting_team'].unique()

fdf['city'].unique()

